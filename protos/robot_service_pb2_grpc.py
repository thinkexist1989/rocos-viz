# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import robot_command_pb2 as robot__command__pb2
import robot_info_pb2 as robot__info__pb2
import robot_state_pb2 as robot__state__pb2


class RobotServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadRobotInfo = channel.unary_unary(
                '/rocos.RobotService/ReadRobotInfo',
                request_serializer=robot__info__pb2.RobotInfoRequest.SerializeToString,
                response_deserializer=robot__info__pb2.RobotInfoResponse.FromString,
                )
        self.ReadRobotState = channel.unary_unary(
                '/rocos.RobotService/ReadRobotState',
                request_serializer=robot__state__pb2.RobotStateRequest.SerializeToString,
                response_deserializer=robot__state__pb2.RobotStateResponse.FromString,
                )
        self.WriteRobotCommmand = channel.unary_unary(
                '/rocos.RobotService/WriteRobotCommmand',
                request_serializer=robot__command__pb2.RobotCommandRequest.SerializeToString,
                response_deserializer=robot__command__pb2.RobotCommandResponse.FromString,
                )


class RobotServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadRobotInfo(self, request, context):
        """Receive robot info information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRobotState(self, request, context):
        """Receive robot state information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRobotCommmand(self, request, context):
        """Send Robot Command
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadRobotInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRobotInfo,
                    request_deserializer=robot__info__pb2.RobotInfoRequest.FromString,
                    response_serializer=robot__info__pb2.RobotInfoResponse.SerializeToString,
            ),
            'ReadRobotState': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRobotState,
                    request_deserializer=robot__state__pb2.RobotStateRequest.FromString,
                    response_serializer=robot__state__pb2.RobotStateResponse.SerializeToString,
            ),
            'WriteRobotCommmand': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRobotCommmand,
                    request_deserializer=robot__command__pb2.RobotCommandRequest.FromString,
                    response_serializer=robot__command__pb2.RobotCommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rocos.RobotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RobotService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadRobotInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rocos.RobotService/ReadRobotInfo',
            robot__info__pb2.RobotInfoRequest.SerializeToString,
            robot__info__pb2.RobotInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadRobotState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rocos.RobotService/ReadRobotState',
            robot__state__pb2.RobotStateRequest.SerializeToString,
            robot__state__pb2.RobotStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteRobotCommmand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rocos.RobotService/WriteRobotCommmand',
            robot__command__pb2.RobotCommandRequest.SerializeToString,
            robot__command__pb2.RobotCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
